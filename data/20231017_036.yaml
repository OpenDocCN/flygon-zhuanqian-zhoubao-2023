- qas:
  - 问题1：作者如何描述在一天内完成2000000字的巨著创作？
  - 回答1：作者认为一天只是象征快速完成的时间单位，而2000000字只是一个虚数，即使是10000000字也是可以完成的。
  - 问题2：文章中提到的合作伙伴的角色是什么？
  - 回答2：合作伙伴负责扯皮和补充图表，作者负责写作。
  - 问题3：为了实现快速创作，作者提出了怎样的思路？
  - 回答3：作者建议借助AI，通过生成多级提纲并利用prompt要求AI输出，以便快速完成所需字数。
  - 问题4：在实施过程中，作者使用了什么文件格式？
  - 回答4：作者选择使用Markdown格式作为过程文件的格式，最终交付的文档则为Word格式。
  - 问题5：为了解决提纲遍历和结果合并的问题，作者采取了哪些措施？
  - 回答5：作者自行开发了一个Markdown提纲解析器，用于提取各级标题并生成prompt，以及通过程序来合并输出的结果。
  text: '# 如何在 1 天内完成 1 部 2000000 字的巨著创作> 原文：[`www.yuque.com/for_lazy/thfiu8/nasallsuuorhgz60`](https://www.yuque.com/for_lazy/thfiu8/nasallsuuorhgz60)##
    (35 赞)如何在 1 天内完成 1 部 2000000 字的巨著创作作者： 查克日期：2023-10-131 天只是个虚数，用来表示快；完全有可能在几个小时内完成的。2000000
    也只是个虚数，这个方法，哪怕搞到 10000000 字，也是没问题的。## 背景之前发过一个风向标 [借助 AIGC 降维打击各种代写](https://wx.zsxq.com/dweb2/index/topic_detail/811882841488212)。后来甲方觉得
    300 万字太夸张了，降到了 150 万字；当然，钱是不能减的。我找了合作伙伴，我负责写作，伙伴负责扯皮和补充图表。上个月文章已经完成，剩下的是扯皮了。收款已经完成了
    70%，我自己的累计投入时间不到一天。## 思路毫无疑问，一天内完成，肯定是要借助 AI 的。问题在于，怎么样让 AI 完成 150 万字。单靠一次指令肯定是不行的，再优秀的
    prompt 也做不到。思路在 [借助 AIGC 降维打击各种代写](https://wx.zsxq.com/dweb2/index/topic_detail/811882841488212)
    也提到过：> 实际上，我就是这么做的。这还是比较笼统，我拆开说一下。>> ### 提纲>> 1.  根据主题，生成一级提纲（章）；>> 2.  针对每个一级提纲，生成二级提纲；>>
    3.  ……>> 4.  根据 N 级提纲，生成 N+1 级提纲。>> 这里，N 主要取决于字数要求。ChatGPT 可以预期的，一般的 prompt 能输出的字数大约在
    1000 字左右（这次写作过程中单次平均字数约为 970 ）。>> 本次写作中，N 为 6，即拆到了 7 级小标题。>> ### 正文>> 这个比较简单了，直接拿着
    7 级小标题扔给 ChatGPT，让它写就好了。>> 主要问题有俩：>> 1.  如何遍历所有 7 级标题？肯定通过循环，不能硬编码写死。>> 2.  输出的结果如何合并？人工肯定不行，得累死，肯定也得通过程序。>>
    为此，需要设计好格式。>> ### 格式>> 最后交付的是 Word 格式，但过程文件我选用了 Markdown 格式。>> 首先，自己写一个 Markdown
    提纲解析器，用于提取各个级别的标题。这就解决了上面提到的如何遍历所有 7 级标题的问题。>> 其次，从生成提纲开始，就通过 prompt 要求 AI 按 Markdown
    格式输出。>> ## 实现>> 有了以上思路，实现就比较容易了。>> ![](img/be957cfc15ce7e3a8e01623477c2c2cb.png)>>
    但既然大佬这么说，我还是给一下代码吧。>> ### Markdown 提纲解析器>> 解析器主要是为了完成提纲解析，取出特定的标题，生成 prompt，扔给
    ChatGPT 写作。>> classMdProcobject"""Markdown 提纲处理器"""> def__init__self, pathNonewithopenf"{path}"as#
    读取文件内容'
- qas:
  - 问题1：这段代码的主要功能是什么？
  - 回答1：获取指定级别的标题及其子标题。
  - 问题2：如何处理不符合规范的标题？
  - 回答2：抛出异常并提示"标题非法"。
  - 问题3：GetSubSections函数的返回值是什么？
  - 回答3：返回指定级别的标题。
  - 问题4：GetPrompt函数的作用是什么？
  - 回答4：根据指定的级别标题生成一个书写提示。
  - 问题5：GetTitleWoSharps函数的作用是什么？
  - 回答5：获取不包含#号的标题内容。
  text: '> defGetSectionsself, lines, level=2"""获取指定级别的标题及其子标题"""if2return0forin"\n"""ifnotcontinue>
    ifnot"#"continue> tryr"(#+) "0exceptprintf"标题非法: {title}"raise"标题非法"> iflencontinue>
    eliflen1else> return> defGetSubSectionsself, l2=None, l3=None, l4=None, l5=None,
    l6=None, l7=None, l8=None"""获取指定级别的标题"""ifisNonereturn> 2ifisNonereturn> 3ifisNonereturn>
    4ifisNonereturn> 5ifisNonereturn> 6ifisNonereturn> 7ifisNonereturn> return8> defGetPromptself,
    l2=None, l3=None, l4=None, l5=None, l6=None, l7=None, l8=None"""获取指定级别的 Prompt"""ifr"^#{1,8}
    .*?\d (.*)"00f"{l2}.{l3}.{l4}.{l5}.{l6}.{l7}.{l8}"elifr"^#{1,8} .*?\d (.*)"00f"{l2}.{l3}.{l4}.{l5}.{l6}.{l7}"elifr"^#{1,8}
    .*?\d (.*)"00f"{l2}.{l3}.{l4}.{l5}.{l6}"elifr"^#{1,8} .*?\d (.*)"00f"{l2}.{l3}.{l4}.{l5}">
    ifnotreturnNone> "\n"f''''''text:"""\n{ol_l2_l3_l4}\n"""\n\n 上面是本书的第 {l2} 章一个小节的目录。''''''f''''''请根据目录，完成{str_last_level_title}小节【{s_last_level_title}】的创作，''''''f''''''要求内容翔实，行文流畅，添加充分的数据和例子来支撑观点；''''''f''''''行文至少
    6 个段落，每一个段落都用 4-7 个长句进行深入分析阐述，每句话不少于 50 字；''''''f''''''使用丰富的转换连词，显示深厚的写作功底；''''''f''''''直接输出内容即可，不要再次输出小节标题；要求不少于
    1000 汉字。''''''> return> defGetTitleWoSharpsself, title"""获取不包含#号的标题内容"""tryr"^#{1,8}\s?(\d\.\d\.\d\.\d\.\d\.\d)?\s?(.*)"01exceptpass>
    return>> ### 完成提纲>> #### 一级提纲>> 这个比较简单了，可以直接把要写的主题，扔给 BING 或者 ChatGPT。可以写代码，但我直接手动来的。>>
    > 效果如下：> >> > 还行吧？> >> > 当然，字数一直是它们的一个缺陷，原谅它们吧，它们数学不好。重新调整一下字数就可以了。> >> > ####
    二级提纲> >> > 两种做法：> >> > 1.  一是直接用刚才的一级提纲，里的 bulet points 当二级提纲；> >> > 2.  二是把 bulet
    points 当作提示词，重新生成二级提纲。> >> > 第一种做法省心，但可能不一定那么满意。这里示例一下第二种做法。> >> > > 结果如下：'
- qas:
  - 问题1：为什么推荐使用 EdgeGPT？
  - 回答1：因为建议使用代码完成一、二级提纲，甚至三级提纲，以免损坏键盘。
  - 问题2：为什么作者选择在 Jupyter Notebook 中运行？
  - 回答2：作者直接在 Jupyter Notebook 中运行，因为它提供了便捷的环境。
  - 问题3：ChatGPT 相对于 BING 有什么优势？
  - 回答3：ChatGPT 更快速、使用次数更多，适合写作多小节内容。
  - 问题4：为什么要创建 CSV 文件？
  - 回答4：创建 CSV 文件用于备用，记录分节的信息。
  - 问题5：为什么要分小节创建文件？
  - 回答5：为了便于故障恢复，作者建议分小节创建文件。
  text: '> > >> > > 您好，我是您的助手，很高兴为您提供写作帮助。根据您的要求，我为您生成了第一章的三级大纲和相应的字数和图表数量，如下：> >
    >> > > 还不错吧？觉得哪里不行，人工修改一下吧。> > >> > > #### N 级提纲> > >> > > 同样的方法，可以完成其他章节提纲。>
    > >> > > 不过要注意的是，一、二级提纲，甚至三级提纲，可以手工完成，但是再往下，我建议还是用代码完成比较好，不然键盘的 `C 和 V`  要坏掉了。>
    > >> > > 推荐 [EdgeGPT](https://github.com/acheong08/EdgeGPT)。> > >> > > ### 完成正文>
    > >> > > 有了提纲，就算完成一半了。> > >> > > 借助前面的 Markdown 标题解析器，非常方便地生成 prompt，交给 ChatGPT
    来完成。> > >> > > 可能有朋友会问，为什么使用 ChatGPT 而不是 BING 呢？因为必应慢，而且次数太有限了，写不了几小节。> > >> >
    > 而且，哪怕用 ChatGPT，也得多准备几个号才行，一天 200 次请求，很快就没了。> > >> > > 我是直接在 Jupyter Notebook
    里跑的，参考代码如下：> > >> > > 1# 这个需要自己写了，参考 ChatGPT 文档，很容易的 f"Outlines.md"forinrange120#
    如果子标题数量超过 20，还可以继续增加，下同。ifnotcontinue> > > f"CS_{l2}.{l3}-{int(time.time())}"#
    分小节创建文件，方便故障恢复 withopenf"{fname}.md""a+"asopenf"{fname}.csv""a+"asf"{title[0]}\n\n"f"section,prompt,content\n"#
    CSV 是创建来备用的，可以不用 forinrange120ifnotcontinuef"{title[0]}\n\n"forinrange120ifnotcontinuef"{title[0]}\n\n"forinrange120ifnotcontinuef"{title[0]}\n\n"forinrange120ifnotcontinuef"**{mdp.GetTitleWOSharps(title[0])}**\n\n"whileTruetryf"{prompt}""\n""\n\n"#
    body = mdp.GetPrompt(l2, l3, l4, l5, l6, l7)  # 可以先用这个来测试，验证提纲格式是否正确 breakexceptasprintf"{l2}.{l3}.{l4}.{l5}.{l6}.{l7}\ttitle:
    {title}\n{e}"435500# 这个定时是有讲究的，超额之后，每次需要等待 7 分钟左右# break> > > f"{body}\n\n"0",""，"",""，""\n""\\n""\n""\\n""\t""\\t"",""，"f''{title},"{prompt}","{body}"\n''35>
    > >> > > * * *> > >> > > 评论区：> > >> > > 良辰美 : 用 AI 写 100 万字的水文巨著，这可能有着广阔的市场需求，国内外都可以封装成一个产品>
    > > 查克 : [呲牙]有拿来写小说的；有接单的（淘宝那些代写，很多都放出来的）。确实有搞头'
- qas:
  - 问题1：文本中的图片文件名是什么？
  - 回答1：img/1c37d505930596d12a88ab23e11aa07a.png
  - 问题2：图片的格式是什么？
  - 回答2：未提到图片格式
  - 问题3：文本中是否包含其他格式要求？
  - 回答3：未提到其他格式要求
  - 问题4：图片在文本中的具体位置如何描述？
  - 回答4：未提供图片具体位置描述
  - 问题5：文本中的星号有何特殊意义？
  - 回答5：未提及星号的特殊意义
  text: '> > >> > > ![](img/1c37d505930596d12a88ab23e11aa07a.png)> > >> > > * * *'
